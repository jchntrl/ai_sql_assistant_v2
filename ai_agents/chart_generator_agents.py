import streamlit as st
from openai import OpenAI
from pydantic import BaseModel
from typing import Optional, List, Tuple, Any
import asyncio
import io

from agents import Agent, Runner, function_tool, trace, handoff

client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])


### TOOLS

# @function_tool
# def get_tables_columns(table_list: list[str]) -> str:
#     """
#     Retrieve the columns of specific tables in the database.
#     :param table_list: List of tables to retrieve columns for.
#     :return: markdown tables as str.
#     """
#     return snowflake_db.get_tables_columns(table_list)


### AGENTS

class VizOutput(BaseModel):
    chart_needed: bool
    comment: str
    code_block: str

data_vizualization_agent = Agent(
    name="data_vizualization_agent",
    instructions=("""
    You are a Data Visualization Agent. Your task is to:

    1. Analyze the structure of a pandas DataFrame based on its .info() output.
        
    2. First, decide if a chart is appropriate to visualize this data. If not, explain briefly why a chart may not be meaningful or suggest alternative summaries (e.g., a table, text summary, etc.).

    3. If a chart is appropriate, determine the most suitable chart type from the following options:
    - `st.area_chart`
    - `st.bar_chart`
    - `st.line_chart`
    - `st.scatter_chart`

    Use these guidelines:
    Use `line_chart` or `area_chart` when the data involves a continuous numerical variable over time, index, or ordered categories.
    Use `bar_chart` when comparing categorical data against numerical values. Always sort in ascending order
    Use `scatter_chart` to explore relationships between two numerical fields.

    If the dataset lacks sufficient numeric or structured categorical data, or the sample size is too small, a chart may not be helpful.

    4. Once the chart type is selected, generate the Streamlit Python code for it, using the most logical columns as:
    - x (usually categorical or ordered)
    - y (numeric)
    - and optionally color or size if relevant.

    Assume the DataFrame is already named df. Include only the relevant arguments in the chart function. Output only the code block.

    ### Example Input
                    
    Index: 9 entries, 0 to 8  
    Data columns (total 4 columns):  
    #   Column  Non-Null Count  Dtype  
    ---  ------  --------------  -----  
    0   ID      9 non-null      int64  
    1   Name    9 non-null      object  
    2   Marks   9 non-null      int64  
    3   Grade   9 non-null      object  
    dtypes: int64(2), object(2)  

    ### Example Output
    st.bar_chart(data=df, x="Name", y="Marks", x_label="Student", y_label="Marks", use_container_width=True)
    """
    ), 
    # model="gpt-4o",
    model="gpt-4.1",
    output_type= VizOutput,
)

class ChartAgentFinalOutput(BaseModel):
    chart_needed: Optional[bool]
    message: Optional[str]
    code_block: Optional[str]

async def run_chart_generator_agents(user_input,df_info):

    context = f"User: {user_input}\n\n# DataFrame Info \n{df_info}"

    print(context)

    with trace("Chart Agent"):

        response = ChartAgentFinalOutput(
            chart_needed = None,
            message = None, 
            code_block = None,
            )

        # Run the SME agent to analyze the request and extract context
        chart_result = await Runner.run(data_vizualization_agent, context)


        if not chart_result.final_output.chart_needed:
            print("SME Agent Comment:", chart_result.final_output.comment)

    # Print the structured context generated by the SME agent
    print("\nChart Agent:")
    print(chart_result.final_output.comment)
    print(chart_result.final_output.code_block)

    response.chart_needed = chart_result.final_output.chart_needed
    response.message = chart_result.final_output.comment
    response.code_block = chart_result.final_output.code_block

    return response

if __name__ == "__main__":

    user_input = "Show me the grades for my highschool class"

    import pandas as pd

    # dictionary of data
    dct = {'ID': {0: 23, 1: 43, 2: 12, 3: 13, 
                4: 67, 5: 89, 6: 90, 7: 56, 
                8: 34}, 
        'Name': {0: 'Ram', 1: 'Deep', 2: 'Yash',
                    3: 'Aman', 4: 'Arjun', 5: 'Aditya',
                    6: 'Divya', 7: 'Chalsea',
                    8: 'Akash' }, 
        'Marks': {0: 89, 1: 97, 2: 45, 3: 78,
                    4: 56, 5: 76, 6: 100, 7: 87,
                    8: 81}, 
        'Grade': {0: 'B', 1: 'A', 2: 'F', 3: 'C',
                    4: 'E', 5: 'C', 6: 'A', 7: 'B',
                    8: 'B'}
        }

    # forming dataframe and printing
    df = pd.DataFrame(dct)
    # print(df.info())

    buffer = io.StringIO()
    df.info(buf=buffer)
    df_info_str = buffer.getvalue()

    print(df_info_str)

    
    asyncio.run(run_chart_generator_agents(user_input,df_info_str))